---
#
# ci/pipeline.yml
#
# Pipeline structure file for a BOSH Release pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( concat meta.name "-boshrelease" ))
  manifest:
    path:   (( concat meta.manifest.directory "/" meta.name ".yml" ))
    vars:   "--- {}"
    vars-pr: (( grab meta.manifest.vars ))
    operator_file_paths: "" # comma (or space) separated list relative to repo root

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  image:
    name: starkandwayne/concourse
    tag: latest

  aws:
    bucket:     (( grab meta.pipeline ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID for your pipeline S3 Bucket" ))
    secret_key: (( param "Please set your AWS Secret Key ID for your pipeline S3 Bucket" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  bosh:
    stemcell:
      major: 621
      cpi: aws-xen-hvm
      os: ubuntu-xenial
    target:        ((bosh-lite-environment))
    cacert:        ((bosh-lite-ca-cert))
    username:      ((bosh-lite-client))
    password:      ((bosh-lite-client-secret))
    deployment:    (( concat meta.name "-testflight" ))
    deployment-pr: (( concat meta.name "-testflight-pr" ))

  slack:
    webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
    success_moji:  ":airplane_departure:"
    fail_moji:     ":airplane_arriving:"
    upset_moji:    ":sad_panda:"
    channel:       (( param "Please specify the channel (#name) or user (@user) to send messages to" ))
    username:      concourse
    icon:          https://cl.ly/2F421Y300u07/concourse-logo-blue-transparent.png
    fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - testflight
      - testflight-pr
      - pre
      - rc
      - shipit
  - name: versioning
    jobs:
      - major
      - minor
      - patch
  - name: compiled-releases
    jobs:
      - compile-release
      - use-compiled-releases

jobs:
  - name: testflight
    public: true
    serial: true
    plan:
    - name: main
      do:
      - { get: git, trigger: true }
      - { get: image }
      - name: testflight
        task: testflight
        image: image
        config:
          platform: linux
          inputs:
            - { name: git }
          run:
            path: ./git/ci/scripts/testflight
            args: []
          params:
            REPO_ROOT:            git
            BOSH_ENVIRONMENT:     (( grab meta.bosh.target ))
            BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
            BOSH_CLIENT:          (( grab meta.bosh.username ))
            BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
            BOSH_DEPLOYMENT:      (( grab meta.bosh.deployment ))
            TEST_ERRANDS:         (( grab meta.test-errands || meta.test-errand || ~ ))
            AWS_ACCESS_KEY:       (( grab meta.aws.access_key ))
            AWS_SECRET_KEY:       (( grab meta.aws.secret_key ))
            MANIFEST_PATH:        (( grab meta.manifest.path ))
            MANIFEST_VARS:        (( grab meta.manifest.vars ))
            MANIFEST_OP_PATHS:    (( grab meta.manifest.operator_file_paths ))
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": testflight job failed" ))'

  - name: testflight-pr
    public: true
    serial: true
    plan:
    - name: main
      do:
      - { get: git-pull-requests, trigger: true, version: every }
      - { get: image }
      - name: pending-status
        put: git-pull-requests
        params:
          path: git-pull-requests
          status: pending
      - name: testflight
        task: testflight
        image: image
        config:
          platform: linux
          inputs:
            - { name: git-pull-requests }
          run:
            path: ./git-pull-requests/ci/scripts/testflight
            args: []
          params:
            REPO_ROOT:            git-pull-requests
            BOSH_ENVIRONMENT:     (( grab meta.bosh.target ))
            BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
            BOSH_CLIENT:          (( grab meta.bosh.username ))
            BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
            BOSH_DEPLOYMENT:      (( grab meta.bosh.deployment-pr ))
            TEST_ERRANDS:         (( grab meta.test-errands || meta.test-errand || ~ ))
            AWS_ACCESS_KEY:       (( grab meta.aws.access_key ))
            AWS_SECRET_KEY:       (( grab meta.aws.secret_key ))
            MANIFEST_PATH:        (( grab meta.manifest.path ))
            MANIFEST_VARS:        (( grab meta.manifest.vars-pr ))
            MANIFEST_OP_PATHS:    (( grab meta.manifest.operator_file_paths ))
        on_success:
          put: git-pull-requests
          params:
            path: git-pull-requests
            status: success
        on_failure:
          put: git-pull-requests
          params:
            path: git-pull-requests
            status: failure
      - name: pr-success-message
        task: pr-success-message
        image: image
        config:
          platform: linux
          inputs:
            - { name: git-pull-requests }
          outputs:
            - { name: message }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git-pull-requests
              pr_url=$(git config --get pullrequest.url)
              cd -
              echo "<${pr_url}|Pull request passed testflight> Merge when ready: ${pr_url}" > message/body
      on_success:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text_file: message/body

  - name: pre
    public: true
    serial: true
    plan:
    - do:
      - get: git
        passed:
        - testflight
        trigger: true
      - get: version
        trigger: true
      - { get: image, passed: [testflight] }
      - task: release-notes
        image: image
        config:
          platform: linux
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
          inputs:
          - name: git
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          link: https://pipes.starkandwayne.com/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
          message: release candidate job 'pre' failed (which is unusual).
          ok: false

  - name: rc
    public: true
    serial: true
    plan:
    - do:
      - { get: git,     trigger: true,  passed: [pre] }
      - { get: version, trigger: false, params: {pre: rc} }
      - { get: image,                   passed: [pre] }
      - task: release-notes
        image: image
        config:
          platform: linux
          inputs:
              - { name: git }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
      - put: version
        params: {file: version/number}
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": rc job failed" ))'

  - name: minor
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": minor job failed" ))'

  - name: patch
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: patch} }
      - { put: version,                 params: {file: version/number} }
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": patch job failed" ))'

  - name: major
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": major job failed" ))'

  - name: shipit
    public: true
    serial: true
    plan:
    - do:
      - { get: version, passed: [rc], params: {bump: final} }
      - { get: git,     passed: [rc] }
      - { get: image,   passed: [rc] }
      - name: release
        task: release
        image: image
        config:
          platform: linux
          inputs:
            - name: version
            - name: git
          outputs:
            - name: gh
            - name: pushme
            - name: notifications
          run:
            path: ./git/ci/scripts/shipit
            args: []
          params:
            REPO_ROOT:    git
            VERSION_FROM: version/number
            RELEASE_ROOT: gh
            REPO_OUT:     pushme
            NOTIFICATION_OUT: notifications
            BRANCH:        (( grab meta.github.branch ))
            GITHUB_OWNER:  (( grab meta.github.owner ))
            GIT_EMAIL:      (( grab meta.git.email ))
            GIT_NAME:       (( grab meta.git.name ))
            AWS_ACCESS_KEY:       (( grab meta.aws.access_key ))
            AWS_SECRET_KEY:       (( grab meta.aws.secret_key ))
            MANIFESTS_DIR: (( grab meta.manifest.directory ))

      - name: upload-git
        put: git
        params:
          rebase: true
          repository: pushme
      - name: tarball
        put: s3-tarball
        params:
          file:  (( concat "gh/artifacts/" meta.name "-*.tgz" ))
      - name: github-release
        put: github
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
      - name: version-bump
        put: version
        params:
          bump: patch
      - name: notify
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text_file: notifications/message
      on_failure:
        put: notify
        params:
          channel:  (( grab meta.slack.channel ))
          username: (( grab meta.slack.username ))
          icon_url: (( grab meta.slack.icon ))
          text:    '(( concat meta.slack.fail_url " " meta.pipeline ": shipit job failed" ))'

  - name: compile-release
    old_name: compile-release-456
    plan:
      - get: git
      - get: github
        trigger: true
      - get: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
        params: {tarball: false}
      - { get: image }
      - task: export-release
        image: image
        config:
          platform: linux
          inputs:
            - name: git
            - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
              path: stemcell
            - name: github
              path: release
          outputs:
            - name: compiled-release
          run:
            path: git/ci/scripts/export-release
          params:
            BOSH_ENVIRONMENT:     (( grab meta.bosh.target ))
            BOSH_CA_CERT:         (( grab meta.bosh.cacert ))
            BOSH_CLIENT:          (( grab meta.bosh.username ))
            BOSH_CLIENT_SECRET:   (( grab meta.bosh.password ))
            STEMCELL_CPI:         (( grab meta.bosh.stemcell.cpi ))
            STEMCELL_OS:          (( grab meta.bosh.stemcell.os ))
      - put: compiled-release
        params:
          file: (( concat "compiled-release/compiled-releases/" meta.name "/*.tgz" ))

  - name: use-compiled-releases
    plan:
      - name: resources
        in_parallel:
          steps:
            - get: git
            - get: github
              passed: [compile-release]
              trigger: true
            - get: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
              passed: [compile-release]
              params: {tarball: false}
            - get: compiled-release
              passed: [compile-release]
            - { get: image, passed: [compile-release] }
      - task: use-compiled-releases
        image: image
        config:
          platform: linux
          inputs:
            - name: git
            - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
              path: stemcell
            - name: github
              path: release
            - name: compiled-release
          outputs:
            - name: pushme
          run:
            path: git/ci/scripts/use-compiled-releases
          params:
            REPO_ROOT:     git
            REPO_OUT:      pushme
            GIT_EMAIL:     (( grab meta.git.email ))
            GIT_NAME:      (( grab meta.git.name ))
            BRANCH:        (( grab meta.github.branch ))
            STEMCELL_OS:   (( grab meta.bosh.stemcell.os ))
            MANIFESTS_DIR: (( grab meta.manifest.directory ))
      - name: upload-git
        put: git
        params:
          rebase: true
          repository: pushme

resource_types:
  - name: slack-notification
    type: docker-image
    source:
      repository: cfcommunity/slack-notification-resource

  - name: pull-request
    type: docker-image
    source:
      repository: jtarchie/pr

resources:
  - name: image
    type: docker-image
    source:
      repository: (( grab meta.image.name ))
      tag:        (( grab meta.image.tag ))

  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: git-pull-requests
    type: pull-request
    check_every: 15m # Required due to API throttling.
    source:
      access_token: (( grab meta.github.access_token ))
      private_key:  (( grab meta.github.private_key ))
      repo:         (( concat meta.github.owner "/" meta.github.repo ))
      base:         (( grab meta.github.branch ))

  - name: version
    type: semver
    source :
      driver:            s3
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      key:               version
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))

  - name: s3-tarball
    type: s3
    source:
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      regexp:            (( concat meta.name "-(.*).tgz" ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))

  - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
    type: bosh-io-stemcell
    source:
      name: (( concat "bosh-" meta.bosh.stemcell.cpi "-" meta.bosh.stemcell.os "-go_agent" ))
      version_family: (( concat meta.bosh.stemcell.major ".latest" ))

  - name: compiled-release
    type: s3
    source:
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      regexp:            (( concat "compiled-releases/" meta.name "/.*-(\\d+).tgz" ))
