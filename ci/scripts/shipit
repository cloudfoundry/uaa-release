#!/bin/bash
#
# ci/scripts/shipit
#
# Script for generating Github release / tag assets
# and managing release notes for a BOSH Release pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

set -eu

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

: ${REPO_ROOT:?required}
: ${RELEASE_ROOT:?required}
: ${REPO_OUT:?required}
: ${BRANCH:?required}
: ${GITHUB_OWNER:?required}
: ${VERSION_FROM:?required}
: ${AWS_ACCESS_KEY:?required}
: ${AWS_SECRET_KEY:?required}
: ${GIT_EMAIL:?required}
: ${GIT_NAME:?required}

if [[ ! -f ${VERSION_FROM} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) not found.  Did you misconfigure Concourse?"
  exit 2
fi
VERSION=$(cat ${VERSION_FROM})
if [[ -z ${VERSION} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) was empty.  Did you misconfigure Concourse?"
  exit 2
fi

if [[ ! -f ${REPO_ROOT}/ci/release_notes.md ]]; then
  echo >&2 "ci/release_notes.md not found.  Did you forget to write them?"
  exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

###############################################################

git clone ${REPO_ROOT} ${REPO_OUT}

pushd ${REPO_OUT}
RELEASE_NAME=$(bosh int config/final.yml --path /final_name 2> /dev/null) \
  || RELEASE_NAME=$(bosh int config/final.yml --path /name)

cat > config/private.yml <<YAML
---
blobstore:
  provider: s3
  options:
    access_key_id: ${AWS_ACCESS_KEY}
    secret_access_key: ${AWS_SECRET_KEY}
YAML

header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Create final release..."
bosh -n create-release --final --version "${VERSION}"
bosh -n create-release releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.yml \
              --tarball releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.tgz
popd

RELEASE_TGZ=$REPO_OUT/releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.tgz
export RELEASE_SHA1=$(sha1sum $RELEASE_TGZ | head -n1 | awk '{print $1}')
export RELEASE_URL="https://github.com/${GITHUB_OWNER}/${RELEASE_NAME}-boshrelease/releases/download/v${VERSION}/${RELEASE_NAME}-${VERSION}.tgz"
echo "RELEASE_SHA1=$RELEASE_SHA1"

mkdir -p ${RELEASE_ROOT}/artifacts
echo "v${VERSION}"                         > ${RELEASE_ROOT}/tag
echo "v${VERSION}"                         > ${RELEASE_ROOT}/name
mv ${REPO_OUT}/releases/*/*-${VERSION}.tgz   ${RELEASE_ROOT}/artifacts
mv ${REPO_OUT}/ci/release_notes.md           ${RELEASE_ROOT}/notes.md
cat >> ${RELEASE_ROOT}/notes.md <<EOF

### Deployment

\`\`\`yaml
releases:
- name:    $RELEASE_NAME
  version: $VERSION
  url:     $RELEASE_URL
  sha1:    $RELEASE_SHA1
\`\`\`
EOF
cat > ${RELEASE_ROOT}/notification <<EOF
<!here> New ${RELEASE_NAME} v${VERSION} released!
EOF


header "Update git repo with final release..."
if [[ -z $(git config --global user.email) ]]; then
  git config --global user.email "${GIT_EMAIL}"
fi
if [[ -z $(git config --global user.name) ]]; then
  git config --global user.name "${GIT_NAME}"
fi

pushd $REPO_OUT
$DIR/update-manifest-release $RELEASE_NAME $VERSION $RELEASE_URL $RELEASE_SHA1

git merge --no-edit ${BRANCH}
git add -A
git status
git commit -m "release v${VERSION}"
popd

cat > ${NOTIFICATION_OUT:-notifications}/message <<EOS
New ${RELEASE_NAME} v${VERSION} released. <https://github.com/${GITHUB_OWNER}/${RELEASE_NAME}-boshrelease/releases/tag/v${VERSION}|Release notes>.
EOS
