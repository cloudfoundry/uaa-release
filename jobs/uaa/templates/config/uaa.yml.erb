<%
  message = ''

  hex_code_regex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/

  # returns null if the property does not have a value
  def p_opt(property)
    p(property, nil)
  end

  def p_arr(property)
    p_opt(property) || []
  end

  def render(params)
    YAML.dump(params, :indentation => 2)
  end

  # adds a nested value to a hash
  # for example hash['top-level']['mid-level']['bottom-level'] = value
  # add_value(hash, value, 'top-level', 'mid-level', 'bottom-level'))
  def add_value(hash, value, *keys)
    last_key = nil
    keys.each_with_index do |key, index|
      last_key = key
      if index < keys.length - 1
        sub_hash = hash[key]
        if sub_hash.nil?
          sub_hash = {}
          hash[key] = sub_hash
        elsif !(sub_hash.is_a?(Hash))
          raise ArgumentError, 'Expected a hash for key:'+key+' in nested elements:'+keys.to_s
        end
        hash = sub_hash
      end
    end
    hash[last_key] = value
  end

  def is_missing(hash, *keys)
    last_key = nil
    keys.each_with_index do |key, index|
      last_key = key
      if index < keys.length - 1
        sub_hash = hash[key]
        if sub_hash.nil?
          return true
        elsif !(sub_hash.is_a?(Hash))
          return true
        end
        hash = sub_hash
      end
    end
    return hash[last_key].nil?
  end

  def error_if_exists(message)
    unless message == ''
      raise ArgumentError, message
    end
  end

  if !!defined?(doc) && doc == 'true'
    require_relative '../../../../docs/doc_overrides' unless defined?(MockProperty)
    extend DocOverrides
  end

  def validateSamlKeys(currentMap)
    #if both keys and legacy keys are missing - annotate keys missing
    #if no `keys` then if legacy keys are incomplete - annotate
    errorinfo = ''
    if (is_missing(currentMap, 'login', 'serviceProviderKey') &&
        is_missing(currentMap, 'login', 'serviceProviderKeyPassword') &&
        is_missing(currentMap, 'login', 'serviceProviderCertificate'))
      errorinfo = errorinfo + (is_missing(currentMap, 'login', 'saml', 'keys')?'\nMissing property: login.saml.keys' : '')
      if errorinfo !~ /login.saml.keys/
        #validate that the keys are intact
        currentMap['login']['saml']['keys'].each do |keyName,keyContents|
          errorinfo = errorinfo + (is_missing(currentMap, 'login', 'saml', 'keys', keyName, 'certificate')?'\nMissing property: login.saml.keys.' + keyName + '.certificate' : '')
          errorinfo = errorinfo + (is_missing(currentMap, 'login', 'saml', 'keys', keyName, 'passphrase')?'\nMissing property: login.saml.keys.' + keyName + '.passphrase' : '')
          errorinfo = errorinfo + (is_missing(currentMap, 'login', 'saml', 'keys', keyName, 'key')?'\nMissing property: login.saml.keys.' + keyName + '.key' : '')
        end
      end
      errorinfo = errorinfo + (is_missing(currentMap, 'login', 'saml', 'activeKeyId')?'\nMissing property: login.saml.activeKeyId' : '')
      if errorinfo !~ /login.saml.activeKeyId/
        #validate that activeKeyId points to a valid key
        keyId = currentMap['login']['saml']['activeKeyId']
        errorinfo = errorinfo + (is_missing(currentMap, 'login', 'saml', 'keys', keyId)?'\Invalid login.saml.activeKeyId: login.saml.keys.' + keyId + ' does not exist' : '')
      end
    else
      errorinfo = errorinfo + (is_missing(currentMap, 'login', 'serviceProviderKey')?'\nMissing property: login.saml.serviceProviderKey' : '')
      errorinfo = errorinfo + (is_missing(currentMap, 'login', 'serviceProviderKeyPassword')?'\nMissing property: login.saml.serviceProviderKeyPassword' : '')
      errorinfo = errorinfo + (is_missing(currentMap, 'login', 'serviceProviderCertificate')?'\nMissing property: login.saml.serviceProviderCertificate' : '')
    end
    return errorinfo
  end

  active_key_found = false
  missing_passphrases = []
  found_keys = []
  duplicate_keys = []

  p('encryption.encryption_keys').each do |key|
    if key['label'].to_s == p('encryption.active_key_label').to_s then
      active_key_found = true
    end
    passphrase = key['passphrase'].to_s
    if passphrase.nil? || passphrase.empty? then
      missing_passphrases << "label=#{key['label']}"
    end
    if found_keys.include? key['label'].to_s then
      duplicate_keys << "label=#{key['label']}"
    else
      found_keys << key['label'].to_s
    end
  end

  raise ArgumentError, 'UAA cannot be started without encryption key value uaa.encryption.active_key_label' if p('encryption.active_key_label').empty?
  raise ArgumentError, "UAA cannot be started as encryption key passphrase for uaa.encryption.encryption_keys/[#{missing_passphrases.join(', ')}] is undefined" unless missing_passphrases.empty?
  raise ArgumentError, "UAA cannot be started as encryption key passphrase for uaa.encryption.encryption_keys/[label=#{p('encryption.active_key_label')}] is undefined" unless active_key_found
  raise ArgumentError, "UAA cannot be started as multiple keys have the same label in uaa.encryption.encryption_keys/[#{duplicate_keys.join(', ')}]" unless duplicate_keys.empty?

  keys_with_invalid_passphrases = []
  p('encryption.encryption_keys').each do |v|
    if v['passphrase'].to_s.length < 8 then
      keys_with_invalid_passphrases << v['label'].to_s
    end

  end
  raise ArgumentError, "The required length of the encryption passphrases for #{keys_with_invalid_passphrases} need to be at least 8 characters long." unless keys_with_invalid_passphrases.length == 0

 if_p('release_level_backup') do
    raise ArgumentError, "DEPRECATED: release_level_backup in the uaa job should no longer be used. Please set the corresponding release_level_backup property in the bbr-uaadb job instead."
 end

  uaa_db = p_arr('uaadb.databases').find { |db| db['tag'] == 'uaa' }
  uaa_role = p_arr('uaadb.roles').find { |role| role['tag'] == 'admin' }
  protocol = p('login.protocol')
  uaa_db_scheme = p('uaadb.db_scheme')
  uaa_db_scheme = uaa_db_scheme == 'postgres' ? 'postgresql' : uaa_db_scheme
  raise ArgumentError, 'Please select either mysql or postgres for uaadb.db_scheme' unless uaa_db_scheme == 'postgresql' || uaa_db_scheme == 'mysql'
  issuer_uri = p('uaa.issuer', p('uaa.url'))
  uaa_db_address = nil
  if_p('uaadb.address') do |address|
    uaa_db_address = address
  end.else do
    if_link('database') do |db_link|
      uaa_db_address = db_link.address
    end.else do
      raise ArgumentError, 'Required uaadb address configuration not specified. Please specify uaadb.address or check your bosh linked database configuration.'
    end
  end

  raise ArgumentError, 'Invalid value for uaa.client.redirect_uri.matching_mode. Valid options are legacy or exact.' unless ['legacy', 'exact'].include?(p('uaa.client.redirect_uri.matching_mode'))

  spring_profiles = uaa_db_scheme
  if p_opt('uaa.ldap.enabled')
    spring_profiles = spring_profiles + ',ldap'
  end

  #simple properties
  params = {
    'name' => 'uaa',
    'encryption' => {
      'active_key_label' => p('encryption.active_key_label'),
      'encryption_keys' => p('encryption.encryption_keys')
    },
    'disableInternalAuth' => p('uaa.disableInternalAuth'),
    'disableInternalUserManagement' => p('uaa.disableInternalUserManagement'),
    'issuer' => {
      'uri' => issuer_uri
    },
    'spring_profiles' => spring_profiles,
    'database' => {
      'url' =>  "jdbc:#{uaa_db_scheme}://#{uaa_db_address}:#{p('uaadb.port')}/#{uaa_db['name']}",
      'username' => uaa_role['name'],
      'password' => uaa_role['password'],
      'maxactive' => p('uaa.database.max_connections'),
      'maxidle' => p('uaa.database.max_idle_connections'),
      'minidle' => p('uaa.database.min_idle_connections'),
      'removeabandoned' => p('uaa.database.remove_abandoned'),
      'logabandoned' =>  p('uaa.database.log_abandoned'),
      'abandonedtimeout' => p('uaa.database.abandoned_timeout'),
      'testwhileidle' => p('uaa.database.test_while_idle')
    },
    'authentication' => {
      'enableUriEncodingCompatibilityMode' => p('uaa.authentication.enable_uri_encoding_compatibility_mode'),
      'policy' => {
        'lockoutAfterFailures' => p('uaa.authentication.policy.lockoutAfterFailures'),
        'countFailuresWithinSeconds' => p('uaa.authentication.policy.countFailuresWithinSeconds'),
        'lockoutPeriodSeconds' => p('uaa.authentication.policy.lockoutPeriodSeconds'),
        'global' => {
          'lockoutAfterFailures' => p('uaa.authentication.policy.global.lockoutAfterFailures'),
          'countFailuresWithinSeconds' => p('uaa.authentication.policy.global.countFailuresWithinSeconds'),
          'lockoutPeriodSeconds' => p('uaa.authentication.policy.global.lockoutPeriodSeconds'),
         }
      }
    },
    'password' => {
      'policy' => {
        'minLength' => p('uaa.password.policy.minLength'),
        'maxLength' => p('uaa.password.policy.maxLength'),
        'requireUpperCaseCharacter' => p('uaa.password.policy.requireUpperCaseCharacter'),
        'requireLowerCaseCharacter' => p('uaa.password.policy.requireLowerCaseCharacter'),
        'requireDigit' => p('uaa.password.policy.requireDigit'),
        'requireSpecialCharacter' => p('uaa.password.policy.requireSpecialCharacter'),
        'expirePasswordInMonths' => p('uaa.password.policy.expirePasswordInMonths'),
        'global' => {
          'minLength' => p('uaa.password.policy.global.minLength'),
          'maxLength' => p('uaa.password.policy.global.maxLength'),
          'requireUpperCaseCharacter' => p('uaa.password.policy.global.requireUpperCaseCharacter'),
          'requireLowerCaseCharacter' => p('uaa.password.policy.global.requireLowerCaseCharacter'),
          'requireDigit' => p('uaa.password.policy.global.requireDigit'),
          'requireSpecialCharacter' => p('uaa.password.policy.global.requireSpecialCharacter'),
          'expirePasswordInMonths' => p('uaa.password.policy.global.expirePasswordInMonths')
        }
      }
    },
    'zones' => {
      'internal' => {
        'hostnames' => {
        }
      }
    }
  }
  params['delete'] = p('uaa.delete') if p_opt('uaa.delete')

  unless ['enabled', 'enabled_skip_hostname_validation', 'enabled_skip_all_validation', 'disabled'].include?(p('uaadb.tls'))
    raise ArgumentError, 'Invalid value for uaadb.tls. Valid options are enabled, enabled_skip_hostname_validation, enabled_skip_all_validation, disabled.'
  end

  if_p('uaadb.tls_enabled') do
    raise ArgumentError, 'uaadb.tls_enabled is no longer supported. Please use uaadb.tls instead.'
  end
  if_p('uaadb.skip_ssl_validation') do
    raise ArgumentError, 'uaadb.skip_ssl_validation is no longer supported. Please use uaadb.tls instead.'
  end

  if uaa_db_scheme == 'mysql'
    params['database']['url'] += case p('uaadb.tls')
      when 'enabled'
        '?useSSL=true'
      when 'enabled_skip_hostname_validation'
        '?useSSL=true&disableSslHostnameVerification=true'
      when 'enabled_skip_all_validation'
        '?useSSL=true&trustServerCertificate=true'
      when 'disabled'
        '?useSSL=false'
    end
    unless p('uaadb.tls') == 'disabled'
      if_p('uaadb.tls_protocols') do |dbTlsProtocol|
        params['database']['url'] += '&enabledSslProtocolSuites=' + dbTlsProtocol
      end
    end

  elsif uaa_db_scheme == 'postgresql'
    params['database']['url'] += case p('uaadb.tls')
      when 'enabled'
        '?sslmode=verify-full&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory'
      when 'enabled_skip_hostname_validation'
        '?sslmode=verify-ca&sslfactory=org.postgresql.ssl.DefaultJavaSSLFactory'
      when 'enabled_skip_all_validation'
        '?sslmode=require'
      when 'disabled'
        '?sslmode=disable'
    end
  end

 if_p('uaa.database.additionalParameters') do |dbParameters|
   paramString = ''
   dbParameters.each do |key, value|
     next unless value
     # ? for first parameter already included in ssl parameter
     paramString += '&' + key + '=' + value
   end
   params['database']['url'] += paramString
 end

  # should the DB not use lower() function in SCIM queries (if true)
  if_p('uaa.database.case_insensitive') do |case_insensitive|
    params['database']['caseinsensitive'] = case_insensitive
  end


  #token configuration and keys
  if_p('uaa.jwt') do |not_used|
    jwt = {
      'token' => {
        'queryString' => {
          'enabled' => p('uaa.jwt.queryString.enabled')
        },
        'revocable' => p('uaa.jwt.revocable'),
        'policy' => {
          'accessTokenValiditySeconds' => p('uaa.jwt.policy.accessTokenValiditySeconds'),
          'refreshTokenValiditySeconds' => p('uaa.jwt.policy.refreshTokenValiditySeconds'),
          'global' => {
            'accessTokenValiditySeconds' => p('uaa.jwt.policy.global.accessTokenValiditySeconds'),
            'refreshTokenValiditySeconds' => p('uaa.jwt.policy.global.refreshTokenValiditySeconds')
          }
        }
      }
    }
    if_p('uaa.jwt.policy.active_key_id') do |activeKeyId|
      add_value(jwt,activeKeyId, 'token', 'policy', 'activeKeyId')
    end

    if_p('uaa.jwt.policy.keys') do |jwtKeys|
      keys = {}
      jwtKeys.each do |kid,keyPair|
        next unless keyPair
        keys[kid] = {}
        keyPair.each do |keyProperty,value|
          keys[kid][keyProperty] = value
        end
      end
      jwt['token']['policy']['keys'] = keys
    end

    if_p('uaa.jwt.claims.exclude') do |exclusions|
      add_value(jwt, exclusions, 'token', 'claims', 'exclude')
    end

    if_p('uaa.jwt.signing_key') do |signingKey|
      add_value(jwt, signingKey, 'token','signing-key')
    end

    if_p('uaa.jwt.verification_key') do |verificationKey|
      add_value(jwt, verificationKey, 'token','verification-key')
    end

    add_value(jwt, p('uaa.jwt.refresh.restrict_grant'), 'token', 'refresh', 'restrict_grant')
    add_value(jwt, p('uaa.jwt.refresh.unique'), 'token', 'refresh', 'unique')

    refresh_token_format = p('uaa.jwt.refresh.format')
    valid_formats = ['opaque', 'jwt']
    if valid_formats.include?(refresh_token_format)
      add_value(jwt, refresh_token_format, 'token', 'refresh', 'format')
    else
      message = message +  "\nuaa.jwt.refresh.format #{refresh_token_format} must be one of #{valid_formats}"
    end

    params['jwt'] = jwt
  end


  # oauth settings
  oauth = {
    'clients' => {},
    'user' => {}
  }
  params['oauth'] = oauth

  if protocol == 'https'
    add_value(oauth, true, 'authorize', 'ssl')
  end

  if_p('uaa.clients') do |clients|
    clients.each do |id,client|
      next unless client
      client_data = {}
      client.each do |key,value|
        client_data[key] = value
      end
      add_value(oauth, client_data, 'clients', id)
      add_value(oauth, id, 'clients', id, 'id')
      if is_missing(client_data, 'authorized-grant-types')
        message = message + "\nMissing property: uaa.clients.#{id}.authorized-grant-types"
      else
        message = message + "\nMissing property: uaa.clients.#{id}.secret" if client_data['secret'].nil? && client_data['authorized-grant-types'] != 'implicit'
        if (client_data['redirect-uri'].nil? || client_data['redirect-uri'].empty?)
          message = message + "\nMissing property: uaa.clients.#{id}.redirect-uri" if client_data['authorized-grant-types'] =~ /implicit|authorization_code/
        elsif client_data['redirect-uri'].split(',').any? { |uri| !(uri =~ /^http(\*|s)?:\/\/(.*:.*@)?(([a-zA-Z0-9\-\*]+\.)*[a-zA-Z0-9\-]+\.)?[a-zA-Z0-9\-]+(:[0-9]+)?(\/.*|$)/) }
          message = message + "\nClient redirect-uri is invalid: uaa.clients.#{id}.redirect-uri"
        end
        message = message + "\nMissing property: uaa.clients.#{id}.authorities" if (client_data['authorities'].nil?) && (client_data['authorized-grant-types'] =~ /client_credentials/)
        message = message + "\nMissing property: uaa.clients.#{id}.scope" if (client_data['scope'].nil?) && (client_data['authorized-grant-types'] != 'client_credentials')
      end

      ['refresh-token-validity', 'access-token-validity'].each do |numberProperty|
        message = message + "\nInvalid number value: uaa.clients.#{id}.#{numberProperty}" unless (client_data[numberProperty].nil?) || (client_data[numberProperty].is_a?(Numeric) && client_data[numberProperty] > 1)
      end
      ['override', 'show-on-homepage'].each do |booleanProperty|
        message = message + "\nInvalid boolean value: uaa.clients.#{id}.#{booleanProperty}" unless (client_data[booleanProperty].nil?) || (client_data[booleanProperty].is_a?(TrueClass) || client_data[booleanProperty].is_a?(FalseClass))
      end
      ['redirect_url', 'redirect_uri'].each do |rejectedProperty|
        message = message + "\nInvalid property: uaa.clients.#{id}.#{rejectedProperty}" unless client_data[rejectedProperty].nil?
      end
    end
  end

  #default admin client
  unless p_opt('uaa.clients.admin')
    oauth['clients']['admin'] = {}
    oauth['clients']['admin']['authorized-grant-types'] = 'client_credentials'
    oauth['clients']['admin']['authorities'] = 'clients.read,clients.write,clients.secret,uaa.admin,scim.read,scim.write,password.write'
    oauth['clients']['admin']['id'] = 'admin'
    oauth['clients']['admin']['secret'] = p_opt('uaa.admin.client_secret')
  end

  oauth['user']['authorities'] = p('uaa.user.authorities')

  if p_opt('uaa.client.secret.policy')
    oauth['client'] ||= {}

    oauth['client']['secret'] = {
      'policy' => {
        'minLength' => p('uaa.client.secret.policy.minLength', 0),
        'maxLength' => p('uaa.client.secret.policy.maxLength', 255),
        'requireUpperCaseCharacter' => p('uaa.client.secret.policy.requireUpperCaseCharacter', 0),
        'requireLowerCaseCharacter' => p('uaa.client.secret.policy.requireLowerCaseCharacter', 0),
        'requireDigit' => p('uaa.client.secret.policy.requireDigit', 0),
        'requireSpecialCharacter' => p('uaa.client.secret.policy.requireSpecialCharacter', 0),
        'expireSecretInMonths' => p('uaa.client.secret.policy.expireSecretInMonths', 0)
      }
    }

    if p_opt('uaa.client.secret.policy.global')
      oauth['client']['secret']['policy']['global'] = {
        'minLength' => p('uaa.client.secret.policy.global.minLength', 0),
        'maxLength' => p('uaa.client.secret.policy.global.maxLength', 255),
        'requireUpperCaseCharacter' => p('uaa.client.secret.policy.global.requireUpperCaseCharacter', 0),
        'requireLowerCaseCharacter' => p('uaa.client.secret.policy.global.requireLowerCaseCharacter', 0),
        'requireDigit' => p('uaa.client.secret.policy.global.requireDigit', 0),
        'requireSpecialCharacter' => p('uaa.client.secret.policy.global.requireSpecialCharacter', 0),
        'expireSecretInMonths' => p('uaa.client.secret.policy.global.expireSecretInMonths', 0)
      }
    end
   end

  scim = {
    'userids_enabled' => p('uaa.scim.userids_enabled'),
    'user' => {
      'override' => p('uaa.scim.user.override')
    }
  }

  params['scim'] = scim

  #bootstrapped users
  if_p('uaa.scim.users') do |users|
    userlist = []
    users.each do |user|
      usr_name = user['name']
      usr_password = user['password'] || ''
      usr_fname = user['firstName'] || ''
      usr_lname = user['lastName'] || ''
      usr_email = user['email'] || usr_name
      usr_origin = user['origin'] || 'uaa'
      usr_groups = ''
      if user['groups'] then usr_groups = user['groups'].join(',') end
      userlist.push(usr_name + '|' + usr_password + '|' + usr_email + '|' + usr_fname + '|' + usr_lname + '|' + usr_groups + '|' + usr_origin)
    end
    scim['users'] = userlist
  end

  #bootstrapped groups
  if_p('uaa.scim.groups') do |groups|
    groupdata = {}
    groups.each do |group_name, group_desc|
      groupdata[group_name] = group_desc
    end
    scim['groups'] = groupdata
  end


  #bootstrapped external groups
  if_p('uaa.scim.external_groups') do |externalGroups|
    if externalGroups.is_a? Array
      scim['external_groups'] = externalGroups
    else
      scim['external_groups'] = {}
      externalGroups.each do |origin, mappings|
        scim['external_groups'][origin] = {}
        mappings.each do |external, groups|
          scim['external_groups'][origin][external] = []
          groups.each do |group|
            scim['external_groups'][origin][external].push(group)
          end
        end
      end
    end
  end


  #internal hostnames for subdomain mapping
  internal_hostnames = []
  if_p('domain') do |domain|
    internal_hostnames.push("login.#{domain}")
  end
  p_arr('uaa.zones.internal.hostnames').each do |hostname|
    internal_hostnames.push(hostname)
  end
  params['zones']['internal']['hostnames'] = internal_hostnames

  if p_opt('uaa.ldap.enabled')
    ldap = {
      'override' => p('uaa.ldap.override', true),
      'ldapdebug' => 'Ldap configured through UAA',
      'profile' => {
        'file' => "ldap/ldap-#{p_opt('uaa.ldap.profile_type')}.xml"
       },
      'ssl' => {
        'skipverification' => p('uaa.ldap.ssl.skipverification'),
        'tls' => p('uaa.ldap.ssl.tls')
      },
      'base' => {
        'url' => p_opt('uaa.ldap.url'),
        'mailAttributeName' => p_opt('uaa.ldap.mailAttributeName'),
        'mailSubstitute' => p_opt('uaa.ldap.mailSubstitute'),
        'mailSubstituteOverridesLdap' => p_opt('uaa.ldap.mailSubstituteOverridesLdap'),
        'referral' => p_opt('uaa.ldap.referral')
      },
      'addShadowUserOnLogin' => p('uaa.ldap.add_shadow_user_on_login')
    }
    unless p_opt('uaa.ldap.sslCertificate').nil?
      ldap['ssl']['sslCertificate'] = p_opt('uaa.ldap.sslCertificate')
    end
    if p_opt('uaa.ldap.profile_type') == 'simple-bind'
      ldap['base']['userDnPattern'] = p_opt('uaa.ldap.userDNPattern')
      ldap['base']['userDnPatternDelimiter'] = p_opt('uaa.ldap.userDNPatternDelimiter')
    else
      ldap['base']['userDn'] = p_opt('uaa.ldap.userDN')
      ldap['base']['password'] = p_opt('uaa.ldap.userPassword')
      ldap['base']['searchBase'] = p_opt('uaa.ldap.searchBase')
      ldap['base']['searchFilter'] = p_opt('uaa.ldap.searchFilter')
    end
    if p_opt('uaa.ldap.profile_type') == 'search-and-compare'
      ldap['base']['passwordAttributeName'] = p_opt('uaa.ldap.passwordAttributeName')
      ldap['base']['passwordEncoder'] = p_opt('uaa.ldap.passwordEncoder')
      ldap['base']['localPasswordCompare'] = p_opt('uaa.ldap.localPasswordCompare')
    end


    if_p('uaa.ldap.emailDomain') do |emailDomains|
      ldap['emailDomain'] = []
      emailDomains.each do |domain|
        ldap['emailDomain'].push(domain)
      end
    end

    if_p('uaa.ldap.attributeMappings') do |attributeMappings|
      ldap['attributeMappings'] = {}
      attributeMappings.each do |key,val|
        ldap['attributeMappings'][key] = val
      end
    end

    ldap['storeCustomAttributes'] = p_opt('uaa.ldap.storeCustomAttributes')

    if_p('uaa.ldap.externalGroupsWhitelist') do |whitelist|
      ldap['externalGroupsWhitelist'] = []
      whitelist.each do |group|
        ldap['externalGroupsWhitelist'].push(group)
      end
    end
    ldap['groups'] = {}
    if p('uaa.ldap.groups.profile_type') == 'no-groups'
      ldap['groups']['file'] = 'ldap/ldap-groups-null.xml'
    else
      ldap['groups']['file'] = "ldap/ldap-#{p('uaa.ldap.groups.profile_type')}.xml"
    end
    ldap['groups']['searchBase'] = p('uaa.ldap.groups.searchBase')
    ldap['groups']['groupRoleAttribute'] = p('uaa.ldap.groups.groupRoleAttribute')
    ldap['groups']['groupSearchFilter'] = p('uaa.ldap.groups.groupSearchFilter')
    ldap['groups']['searchSubtree'] = p('uaa.ldap.groups.searchSubtree')
    ldap['groups']['maxSearchDepth'] = p('uaa.ldap.groups.maxSearchDepth')
    params['ldap'] = ldap
  else
    unless p_opt('uaa.ldap.override').nil?
      ldap = {
        'override' => p('uaa.ldap.override')
      }
      params['ldap'] = ldap
    end
  end

  valid_session_stores = ['memory', 'database']
  session_store = p('uaa.servlet.session-store')
  if valid_session_stores.include?(session_store)
    params['servlet'] = {
      'session-store' => session_store,
      'idle-timeout' => p('uaa.servlet.idle-timeout'),
      'session-cookie' => {
        'max-age' => p('uaa.servlet.session-cookie.max-age')
      }
    }
  else
    message = message + "\nuaa.servlet.session-store invalid. Must be one of #{valid_session_stores.join(', ')}"
  end

  #validate that we have all required parameters
  if is_missing params, 'jwt', 'token', 'signing-key'
     if is_missing params, 'jwt', 'token', 'policy', 'activeKeyId'
       message = message + '\nMissing property: uaa.jwt.policy.active_key_id'
     else
       activeKeyId = params['jwt']['token']['policy']['activeKeyId']
       if is_missing params, 'jwt', 'token', 'policy', 'keys', activeKeyId
         message = message + '\nMissing property: uaa.jwt.policy.active_key_id mismatch'
       elsif is_missing params, 'jwt', 'token', 'policy', 'keys', activeKeyId, 'signingKey'
           message = message + '\nMissing property: uaa.jwt.policy.active_key_id missing signingKey'
       end
     end
  end

  protocol = p('login.protocol')

  uaa_base = p('uaa.url')

  entity_base_url_fallback = uaa_base.sub("://uaa.", "://login.")

  login_entityBaseUrl = nil
  if_p('login.saml.entity_base_url') do |entity_base_url|
    login_entityBaseUrl = "#{protocol}://#{entity_base_url}"
  end .else do
    login_entityBaseUrl = entity_base_url_fallback
  end

  login_entityId = p(['login.saml.entityid'], login_entityBaseUrl.sub(/^http.*:\/\//,''))

  login_authorizeUrl = "#{p('uaa.url', entity_base_url_fallback)}/oauth/authorize"

  login_url = p('login.url', login_entityBaseUrl)

  params = params.merge({
    'require_https' => true,
    'https_port' => p('uaa.ssl.port'),
    'assetBaseUrl' => p('login.asset_base_url'),
    'logout' => {
      'redirect' => {
        'url' => p('login.logout.redirect.url'),
        'parameter' => {
          'disable' => false
        }
      }
    },
    'uaa' => {
      'shutdown' => {
        'sleep' => p('uaa.shutdown.sleep')
      },
      'url' => uaa_base,
      'limitedFunctionality' => {
        'statusFile' => p('uaa.limitedFunctionality.statusFile'),
        'whitelist' => {
          'endpoints' => p('uaa.limitedFunctionality.whitelist.endpoints'),
          'methods' => p('uaa.limitedFunctionality.whitelist.methods')
        }
      },
      'oauth' => {
        'redirect_uri' => {
          'allow_unsafe_matching' => p('uaa.client.redirect_uri.matching_mode') == 'legacy'
        }
      }
    },
    'login' => {
      'url' => login_url,
      'idpDiscoveryEnabled' => p('login.idpDiscoveryEnabled'),
      'accountChooserEnabled' => p('login.accountChooserEnabled'),
      'entityBaseURL' => login_entityBaseUrl,
      'entityID' => login_entityId,
      'prompt' => {
        'username' => {
          'text' => p('login.prompt.username.text')
        },
        'password' => {
          'text' => p('login.prompt.password.text')
        }
      },
      'authorize' => {
        'url' => login_authorizeUrl
      },
      'saml' => {
        'socket' => {
          'connectionManagerTimeout' => p_opt('login.saml.socket.connectionManagerTimeout'),
          'soTimeout' => p_opt('login.saml.socket.soTimeout')
        }
      }
    }
  })

  if_p('login.defaultIdentityProvider') do |login_defaultIdentityProvider|
    add_value(params, login_defaultIdentityProvider, 'login', 'defaultIdentityProvider')
  end

  if_p('uaa.rest.template') do |rest_template|
    rest_template.each do |key,val|
      add_value(params, val, 'rest','template', key)
    end
  end

  if_p('login.links') do |login_links|
    login_links.each do |key,val|
      add_value(params, val, 'links', key)
    end
  end
  #deprecated property still works
  add_value(params, p('login.home_redirect'), 'links', 'homeRedirect') if p_opt('login.home_redirect')

  add_value(params, p('login.logout.redirect.parameter.whitelist'), 'logout', 'redirect', 'parameter', 'whitelist') if p_opt('login.logout.redirect.parameter.whitelist')

  if_p('login.smtp') do |login_smtp|
    login_smtp.each do |key,val|
      add_value(params, val, 'smtp', key)
    end
  end

  add_value(params, p('login.notifications.url'), 'notifications', 'url') if p_opt('login.notifications.url')

  if p_opt('login.branding.consent')
    add_value(params, p('login.branding.consent.text'), 'login', 'branding', 'consent', 'text') if p_opt('login.branding.consent.text')

    if p_opt('login.branding.consent.link')
      if p_opt('login.branding.consent.text')
        link = p('login.branding.consent.link').strip
        begin
          parsed = URI.parse(link)
          raise URI::InvalidURIError.new if parsed.instance_of? URI::Generic
          add_value(params, link, 'login', 'branding', 'consent', 'link')
        rescue URI::InvalidURIError
          message = message + "\nlogin.branding.consent.link value #{link} is not a valid uri"
        end
      else
        message = message + "\nlogin.branding.consent.text must also be provided if specifying login.branding.consent.link"
      end
    end
  end

  add_value(params, p('login.branding.company_name'), 'login', 'branding', 'companyName') if p_opt('login.branding.company_name')
  add_value(params, p('login.branding.product_logo'), 'login', 'branding', 'productLogo') if p_opt('login.branding.product_logo')
  add_value(params, p('login.branding.square_logo'), 'login', 'branding', 'squareLogo') if p_opt('login.branding.square_logo')
  add_value(params, p('login.branding.footer_legal_text'), 'login', 'branding', 'footerLegalText') if p_opt('login.branding.footer_legal_text')
  add_value(params, p('login.branding.footer_links'), 'login', 'branding', 'footerLinks') if p_opt('login.branding.footer_links')

  add_value(params, p('login.branding.banner.logo'), 'login', 'branding', 'banner', 'logo') if p_opt('login.branding.banner.logo')
  add_value(params, p('login.branding.banner.text'), 'login', 'branding', 'banner', 'text') if p_opt('login.branding.banner.text')
  if p_opt('login.branding.banner.textColor')
    textColor = p('login.branding.banner.textColor')
    if (textColor =~ hex_code_regex) == 0
      add_value(params, p('login.branding.banner.textColor'), 'login', 'branding', 'banner', 'textColor')
    else
      message = message + "\nlogin.branding.banner.textColor value #{textColor} is not a valid hex code"
    end
  end

  if p_opt('login.branding.banner.backgroundColor')
    backgroundColor = p('login.branding.banner.backgroundColor')
    if (backgroundColor =~ hex_code_regex) == 0
      add_value(params, p('login.branding.banner.backgroundColor'), 'login', 'branding', 'banner', 'backgroundColor')
    else
      message = message + "\nlogin.branding.banner.backgroundColor value #{backgroundColor} is not a valid hex code"
    end
  end

  if p_opt('login.branding.banner.link')
    link = p('login.branding.banner.link').strip
    begin
      parsed = URI.parse(link)
      raise URI::InvalidURIError.new if parsed.instance_of? URI::Generic
      add_value(params, link, 'login', 'branding', 'banner', 'link')
    rescue URI::InvalidURIError
      message = message + "\nlogin.branding.banner.link value #{link} is not a valid uri"
    end
  end

  add_value(params, p('login.saml.serviceProviderCertificate'), 'login', 'serviceProviderCertificate') if p_opt('login.saml.serviceProviderCertificate')
  add_value(params, p('login.saml.serviceProviderKey'), 'login', 'serviceProviderKey') if p_opt('login.saml.serviceProviderKey')
  add_value(params, p('login.saml.serviceProviderKeyPassword'), 'login', 'serviceProviderKeyPassword') if p_opt('login.saml.serviceProviderKeyPassword') && p_opt('login.saml.serviceProviderKey')

  add_value(params, p('login.self_service_links_enabled'), 'login', 'selfServiceLinksEnabled')

  add_value(params, p('login.saml.activeKeyId'), 'login', 'saml', 'activeKeyId') if p_opt('login.saml.activeKeyId')
  if_p('login.saml.keys') do |samlKeys|
    samlKeys.each do |keyName, keyValue|
      add_value(params, keyValue, 'login', 'saml', 'keys', keyName, )
    end
  end

  if_p('login.mfa.providers') do |providers|
    providers.each do |mfaName, provider|
      provider.each do |key,value|
        add_value(params, value, 'login', 'mfa', 'providers', mfaName, key)
      end
      add_value(params, p('login.mfa.providers.'+mfaName+'.config.issuer'), 'login', 'mfa', 'providers', mfaName, 'config', 'issuer') if p_opt('login.mfa.providers.'+mfaName+'.config.issuer')
    end
  end

  add_value(params, p('login.mfa.providerName'), 'login', 'mfa', 'providerName') if p_opt('login.mfa.providerName')
  add_value(params, p('login.mfa.enabled'), 'login', 'mfa', 'enabled') if p_opt('login.mfa.enabled')

  if_p('login.oauth.providers') do |providers|
    providers.each do |idpAlias, provider|
      provider.each do |key,value|
        if key.to_s.eql?('attributeMappings') then
          value.each do |k,v|
            add_value(params, v, 'login', 'oauth', 'providers', idpAlias, 'attributeMappings', k)
          end
        else
          add_value(params, value, 'login', 'oauth', 'providers', idpAlias, key)
        end
      end
    end
  end

  add_value(params, p('login.saml.signMetaData'), 'login', 'saml', 'signMetaData') unless p_opt('login.saml.signMetaData').nil?
  add_value(params, p('login.saml.signRequest'), 'login', 'saml', 'signRequest') unless p_opt('login.saml.signRequest').nil?
  add_value(params, p('login.saml.wantAssertionSigned'), 'login', 'saml', 'wantAssertionSigned')
  add_value(params, p('login.saml.disableInResponseToCheck'), 'login', 'saml', 'disableInResponseToCheck')
  if_p('login.saml.signatureAlgorithm') { |alg| add_value(params, alg, 'login', 'saml', 'signatureAlgorithm') }

  if_p('login.saml.providers') do |samlProviders|
    samlProviders.reject {|k,_| k.to_s == ''}.each do |idpAlias,idpProvider|
      idpProvider.reject {|k,_| %w(idpMetadata).include?(k.to_s)}.each do |key,value|
        if key.to_s.eql?('attributeMappings') then
          value.each do |akey,aval|
            add_value(params, aval, 'login', 'saml', 'providers', idpAlias, 'attributeMappings', akey)
          end
        else
          add_value(params, value, 'login', 'saml', 'providers', idpAlias, key)
        end
      end
      add_value(params, idpProvider['idpMetadata'], 'login', 'saml', 'providers', idpAlias, 'idpMetadata')
    end
  end

  if_p('login.analytics.code', 'login.analytics.domain') do |code, domain|
    add_value(params, code, 'analytics', 'code')
    add_value(params, domain, 'analytics', 'domain')
  end

  # cors settings
  add_value(params, p('uaa.cors.default.allowed.headers'), 'cors', 'default', 'allowed', 'headers') if p_opt('uaa.cors.default.allowed.headers')
  add_value(params, p('uaa.cors.default.allowed.origin'), 'cors', 'default', 'allowed', 'origin') if p_opt('uaa.cors.default.allowed.origin')
  add_value(params, p('uaa.cors.default.allowed.uris'), 'cors', 'default', 'allowed', 'uris') if p_opt('uaa.cors.default.allowed.uris')
  add_value(params, p('uaa.cors.default.allowed.methods'), 'cors', 'default', 'allowed', 'methods') if p_opt('uaa.cors.default.allowed.methods')
  add_value(params, p('uaa.cors.default.allowed.credentials'), 'cors', 'default', 'allowed', 'credentials') if p_opt('uaa.cors.default.allowed.credentials')
  add_value(params, p('uaa.cors.default.max_age'), 'cors', 'default', 'max_age') if p_opt('uaa.cors.default.max_age')

  add_value(params, p('uaa.cors.xhr.allowed.headers'), 'cors', 'xhr', 'allowed', 'headers') if p_opt('uaa.cors.xhr.allowed.headers')
  add_value(params, p('uaa.cors.xhr.allowed.origin'), 'cors', 'xhr', 'allowed', 'origin') if p_opt('uaa.cors.xhr.allowed.origin')
  add_value(params, p('uaa.cors.xhr.allowed.uris'), 'cors', 'xhr', 'allowed', 'uris') if p_opt('uaa.cors.xhr.allowed.uris')
  add_value(params, p('uaa.cors.xhr.allowed.methods'), 'cors', 'xhr', 'allowed', 'methods') if p_opt('uaa.cors.xhr.allowed.methods')
  add_value(params, p('uaa.cors.xhr.allowed.credentials'), 'cors', 'xhr', 'allowed', 'credentials') if p_opt('uaa.cors.xhr.allowed.credentials')
  add_value(params, p('uaa.cors.xhr.max_age'), 'cors', 'xhr', 'max_age') if p_opt('uaa.cors.xhr.max_age')

  if_p('uaa.ca_certs') do |ca_certs|
    add_value(params, ca_certs, 'uaa', 'ca_certs')
  end

  #validate that we have all required parameters

  message = message + validateSamlKeys(params)

  error_if_exists message

%>
<%= render(params) %>
